// 트리를 합칠 때, 항상 [높이가 낮은 트리를] [높이가 높은 트리] 밑으로
// (Union-By-Rank) 랭크에 의한 합치기 최적화
// 시간 복잡도 O(Ackermann(n)) = O(1)
class DisjointSet
{
public:
	DisjointSet(int n) : _parent(n), _rank(1)
	{
		for (int i = 0; i < n; i++)
		{
			_parent[i] = i;
		}
	}

	int Find(int u)
	{
		if (u == _parent[u])
		{
			return u;
		}

		return Find(_parent[u]);
	}

	// u와 v를 합친다 ( 일단 u가 v 밑으로)
	void Merge(int u, int v)
	{
		u = Find(u);
		v = Find(v);

		if (u == v)
		{
			return;
		}

		if (_rank[u] > _rank[v])
		{
			swap(u, v);
		}

		// rank[u] <= rank[v] 보장됨

		_parent[u] = v;
		if (_rank[u] == _rank[v])
		{
			_rank[v]++;
		}
	}

private:
	vector<int> _parent; 
	vector<int> _rank;
};